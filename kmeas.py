# -*- coding: utf-8 -*-
"""KMEAS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KNQVNIuT9IvR9SW3sdhJjegA5NcUfVXb

**IDEE PER KMEANS STEP BY STEP**

Step-1: Select the value of K, to decide the number of clusters to be formed.

Step-2: Select random K points which will act as centroids.

Step-3: Assign each data point, based on their distance from the randomly selected points (Centroid), to the nearest/closest centroid which will form the predefined clusters.

Step-4: place a new centroid of each cluster.

Step-5: Repeat step no.3, which reassign each datapoint to the new closest centroid of each cluster.

Step-6: If any reassignment occurs, then go to step-4 else go to Step 7.

Step-7: FINISH

**Preparazione ambiente di sviluppo**
"""

## importo le librerie
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# creo il dataframe
df = pd.read_csv("Mall_Customers.csv")
df

df1=df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
df1

dfa=df1

## scaling dei dati
sc_dfa = StandardScaler()
dfa_std = sc_dfa.fit_transform(dfa.astype(float))

"""**ALGORITMO DI KMEANS**"""

## fittiamo il nostro modello scegliendo gli iperparametri
## Clustering con KMeans
kmeans = KMeans(n_clusters=4, random_state=42).fit(dfa_std)
labels = kmeans.labels_

new_dfa = pd.DataFrame(data = dfa_std, columns=['Age', 'Annual Income (k$)', 'Spending Score (1-100)'])
new_dfa['label_kmeans'] = labels

new_dfa

"""**RAPPRESENTAZIONE GRAFICA**"""

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(new_dfa.Age[new_dfa.label_kmeans == 0], new_dfa["Annual Income (k$)"][new_dfa.label_kmeans == 0], new_dfa["Spending Score (1-100)"][new_dfa.label_kmeans == 0], c='blue', s=100, edgecolor='green',linestyle='-')
ax.scatter(new_dfa.Age[new_dfa.label_kmeans == 1], new_dfa["Annual Income (k$)"][new_dfa.label_kmeans == 1], new_dfa["Spending Score (1-100)"][new_dfa.label_kmeans == 1], c='red', s=100, edgecolor='green',linestyle='-')
ax.scatter(new_dfa.Age[new_dfa.label_kmeans == 2], new_dfa["Annual Income (k$)"][new_dfa.label_kmeans == 2], new_dfa["Spending Score (1-100)"][new_dfa.label_kmeans == 2], c='green', s=100, edgecolor='green',linestyle='-')
ax.scatter(new_dfa.Age[new_dfa.label_kmeans == 3], new_dfa["Annual Income (k$)"][new_dfa.label_kmeans == 3], new_dfa["Spending Score (1-100)"][new_dfa.label_kmeans == 3], c='orange', s=100, edgecolor='green',linestyle='-')
ax.scatter(new_dfa.Age[new_dfa.label_kmeans == 4], new_dfa["Annual Income (k$)"][new_dfa.label_kmeans == 4], new_dfa["Spending Score (1-100)"][new_dfa.label_kmeans == 4], c='purple', s=100, edgecolor='green',linestyle='-')
centers = kmeans.cluster_centers_
ax.scatter(centers[:, 0], centers[:, 1], centers[:, 2], c='black', s=500);
plt.xlabel("Age")
plt.ylabel("Annual Income (k$)")
ax.set_zlabel("Spending Score (1-100)	")
plt.show()